#!/usr/bin/env python3
"""
创建简单测试用户（绕过密码验证）
"""

import sys
import sqlite3
from werkzeug.security import generate_password_hash
from datetime import datetime

def create_simple_users():
    """直接在数据库中创建测试用户"""
    print("🔧 直接创建测试用户...")
    
    try:
        # 连接数据库
        conn = sqlite3.connect('ros2_wiki.db')
        cursor = conn.cursor()
        
        # 测试用户数据
        test_users = [
            ('test_user_1', 'test1@example.com', False),
            ('test_user_2', 'test2@example.com', False),
            ('admin_test', 'admin@example.com', True),
            ('john_doe', 'john.doe@company.com', False),
            ('jane_smith', 'jane.smith@company.com', False),
            ('alice_wang', 'alice.wang@tech.com', False),
            ('bob_chen', 'bob.chen@tech.com', True),
        ]
        
        created_count = 0
        for username, email, is_admin in test_users:
            try:
                # 检查用户是否已存在
                cursor.execute("SELECT id FROM users WHERE username = ? OR email = ?", (username, email))
                if cursor.fetchone():
                    print(f"⚠️ 用户已存在: {username}")
                    continue
                
                # 创建用户
                password_hash = generate_password_hash('SimplePassword123!')
                cursor.execute("""
                    INSERT INTO users (username, email, password_hash, is_admin, created_at)
                    VALUES (?, ?, ?, ?, ?)
                """, (username, email, password_hash, is_admin, datetime.now()))
                
                print(f"✅ 创建用户: {username} ({email}) - {'管理员' if is_admin else '普通用户'}")
                created_count += 1
                
            except Exception as e:
                print(f"❌ 创建用户失败: {username} - {e}")
        
        conn.commit()
        
        # 显示所有用户
        cursor.execute("SELECT id, username, email, is_admin FROM users ORDER BY created_at")
        users = cursor.fetchall()
        
        print(f"\n📊 创建结果: {created_count} 用户创建成功")
        print(f"👥 当前用户总数: {len(users)}")
        print("用户列表:")
        for user in users:
            admin_status = "管理员" if user[3] else "普通用户"
            print(f"  - {user[1]} ({user[2]}) - {admin_status}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"❌ 创建测试用户异常: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == '__main__':
    success = create_simple_users()
    sys.exit(0 if success else 1)
