name: üöÄ Auto Deploy ROS2 Wiki

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  ADMIN_USERNAME: ssss
  ADMIN_EMAIL: seventee_0611@qq.com
  ADMIN_PASSWORD: ssss123
  AUTO_CREATE_ADMIN: true

jobs:
  test:
    runs-on: ubuntu-latest
    name: üß™ Test Application
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test database initialization
      run: |
        python -c "
        import os
        os.environ['AUTO_CREATE_ADMIN'] = 'true'
        os.environ['ADMIN_USERNAME'] = 'ssss'
        os.environ['ADMIN_EMAIL'] = 'seventee_0611@qq.com'
        os.environ['ADMIN_PASSWORD'] = 'ssss123'
        from cloud_init_db import init_cloud_database
        success = init_cloud_database()
        print('‚úÖ Database initialization test passed!' if success else '‚ùå Database test failed!')
        exit(0 if success else 1)
        "
    
    - name: Test admin account creation
      run: |
        python -c "
        import sqlite3
        from werkzeug.security import check_password_hash
        conn = sqlite3.connect('ros2_wiki.db')
        cursor = conn.cursor()
        cursor.execute('SELECT username, password_hash, is_admin FROM users WHERE username = ?', ('ssss',))
        user = cursor.fetchone()
        if user and user[2] and check_password_hash(user[1], 'ssss123'):
            print('‚úÖ Admin account test passed!')
            exit(0)
        else:
            print('‚ùå Admin account test failed!')
            exit(1)
        "

  deploy-render:
    needs: test
    runs-on: ubuntu-latest
    name: üåê Deploy to Render.com
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Render
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}
        wait-for-success: true
    
    - name: Wait for deployment
      run: sleep 60
    
    - name: Test deployment
      run: |
        RENDER_URL="${{ secrets.RENDER_URL }}"
        echo "Testing deployment at: $RENDER_URL"
        
        # Test basic connectivity
        curl -f "$RENDER_URL" || exit 1
        echo "‚úÖ Basic connectivity test passed"
        
        # Test login page
        curl -f "$RENDER_URL/login" || exit 1
        echo "‚úÖ Login page test passed"
        
        # Test debug endpoints
        curl -f "$RENDER_URL/debug/env" || echo "‚ö†Ô∏è Debug endpoints not available"
        curl -f "$RENDER_URL/debug/db" || echo "‚ö†Ô∏è Database debug not available"
        curl -f "$RENDER_URL/debug/admin" || echo "‚ö†Ô∏è Admin debug not available"
        
        echo "üéâ Deployment test completed!"

  deploy-railway:
    needs: test
    runs-on: ubuntu-latest
    name: üöÇ Deploy to Railway.app
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Railway
      uses: bervProject/railway-deploy@v1.0.0
      with:
        railway_token: ${{ secrets.RAILWAY_TOKEN }}
        service: ${{ secrets.RAILWAY_SERVICE }}
    
    - name: Wait for Railway deployment
      run: sleep 90
    
    - name: Test Railway deployment
      run: |
        RAILWAY_URL="${{ secrets.RAILWAY_URL }}"
        if [ -n "$RAILWAY_URL" ]; then
          echo "Testing Railway deployment at: $RAILWAY_URL"
          curl -f "$RAILWAY_URL" || exit 1
          echo "‚úÖ Railway deployment test passed"
        else
          echo "‚ö†Ô∏è Railway URL not configured"
        fi

  notify:
    needs: [deploy-render, deploy-railway]
    runs-on: ubuntu-latest
    name: üì¢ Deployment Notification
    if: always()
    
    steps:
    - name: Deployment Success Notification
      if: needs.deploy-render.result == 'success' || needs.deploy-railway.result == 'success'
      run: |
        echo "üéâ Deployment Successful!"
        echo "‚úÖ Admin Account: ssss / ssss123"
        echo "üìß Admin Email: seventee_0611@qq.com"
        echo "üåê Your application is now live!"
        
        if [ -n "${{ secrets.RENDER_URL }}" ]; then
          echo "üîó Render URL: ${{ secrets.RENDER_URL }}"
        fi
        
        if [ -n "${{ secrets.RAILWAY_URL }}" ]; then
          echo "üîó Railway URL: ${{ secrets.RAILWAY_URL }}"
        fi
    
    - name: Deployment Failure Notification
      if: needs.deploy-render.result == 'failure' && needs.deploy-railway.result == 'failure'
      run: |
        echo "‚ùå Deployment Failed!"
        echo "Please check the logs and try again."
        exit 1
