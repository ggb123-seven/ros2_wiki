#!/usr/bin/env python3
"""
手动安装Python依赖的脚本
当系统没有pip时使用
"""
import sys
import os
import subprocess
import urllib.request
import tempfile
import zipfile

def install_pip():
    """安装pip"""
    print("📦 正在安装pip...")
    try:
        # 下载get-pip.py
        url = "https://bootstrap.pypa.io/get-pip.py"
        with urllib.request.urlopen(url) as response:
            with tempfile.NamedTemporaryFile(mode='wb', delete=False) as tmp:
                tmp.write(response.read())
                tmp_path = tmp.name
        
        # 运行get-pip.py
        subprocess.run([sys.executable, tmp_path, "--user"], check=True)
        os.unlink(tmp_path)
        print("✅ pip安装成功")
        return True
    except Exception as e:
        print(f"❌ pip安装失败: {e}")
        return False

def install_packages():
    """安装所需的包"""
    packages = [
        "Flask==2.3.3",
        "Flask-Login==0.6.3", 
        "Werkzeug==2.3.7",
        "Markdown==3.5.1",
        "Pygments==2.16.1"
    ]
    
    pip_cmd = [sys.executable, "-m", "pip", "install", "--user"]
    
    for package in packages:
        print(f"📦 正在安装 {package}...")
        try:
            subprocess.run(pip_cmd + [package], check=True)
            print(f"✅ {package} 安装成功")
        except subprocess.CalledProcessError as e:
            print(f"❌ {package} 安装失败: {e}")
            return False
    
    return True

def main():
    print("🐍 Python依赖安装脚本")
    print("=" * 30)
    
    # 检查pip是否存在
    try:
        subprocess.run([sys.executable, "-m", "pip", "--version"], 
                      check=True, capture_output=True)
        print("✅ pip已存在")
    except subprocess.CalledProcessError:
        print("⚠️  pip不存在，正在安装...")
        if not install_pip():
            print("❌ 无法安装pip，请手动安装")
            return False
    
    # 安装包
    print("\n🔧 开始安装依赖包...")
    if install_packages():
        print("\n🎉 所有依赖安装完成！")
        return True
    else:
        print("\n❌ 部分依赖安装失败")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)